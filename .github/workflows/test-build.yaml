name: Build Docker Image and Deploy to ECR

on:
  push:
    branches:
      - test # 테스트를 위해 food branch push 이벤트 발생시 트리거

env:
  APPLICATION_TEST_YAML_PATH: ./src/main/resources/application-test.yaml

jobs:
  test-build:
    name: Build to Test
    environment: test # GitHub Action Secret Environment
    runs-on: ubuntu-latest
    steps:

      #####################
      # Environment Setup #
      #####################

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        id: jdk-11-setup
        uses: actions/setup-java@v1
        with:
          java-version: 11

      ######################
      # Gradle Build Steps #
      ######################

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        id: execute-gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        id: bradle-with-gradle
        run: ./gradlew clean build --stacktrace --info -x test
        shell: bash

      ########################
      # 서울 리전 AWS ECR 이미지 배포 #
      ########################

      - name: Configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          working-directory: ./docker
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend-test
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          ls -al
          
          echo "\nBuild Docker image ...\n"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/test/Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "\nPushing image to ECR...\n"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
